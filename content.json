{"meta":{"title":"Guess","subtitle":"杰的博客","description":"学习资料","author":"杰","url":"http://example.com","root":"/"},"pages":[{"title":"我的朋友们","date":"2022-09-21T07:23:59.116Z","updated":"2022-09-21T07:23:59.116Z","comments":true,"path":"friends/index.html","permalink":"http://example.com/friends/index.html","excerpt":"这里写友链上方的内容。","text":"这里写友链上方的内容。 这里可以写友链页面下方的文字备注，例如自己的友链规范、示例等。"},{"title":"categories","date":"2022-09-21T05:22:23.000Z","updated":"2022-09-21T07:23:40.923Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"","date":"2022-09-21T07:22:55.192Z","updated":"2022-09-21T07:22:55.192Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"下面写关于自己的内容"},{"title":"所有标签","date":"2022-09-21T07:26:16.892Z","updated":"2022-09-21T07:26:16.892Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"music","date":"2022-09-24T10:49:15.000Z","updated":"2022-09-24T10:49:15.477Z","comments":true,"path":"music/index.html","permalink":"http://example.com/music/index.html","excerpt":"","text":""}],"posts":[{"title":"if语句","slug":"page-4","date":"2022-10-10T13:27:56.000Z","updated":"2022-10-10T13:44:32.036Z","comments":true,"path":"2022/10/10/page-4/","link":"","permalink":"http://example.com/2022/10/10/page-4/","excerpt":"","text":"今天记录下if语句 1.if（表达式）{} //若条件不是这个就是那个可以不用花括号即仅为一简单语句时 2.也可用 if else语句 if(表达式){ 语句a } else{ 语句b } 3.还有if……else if 与上面相同 if（表达式）{ 语句a } else if{ 语句b } 可追加else{ 语句c } 以此类推进行","categories":[],"tags":[]},{"title":"缓冲区溢出（摘录）","slug":"page-3","date":"2022-10-05T13:21:57.000Z","updated":"2022-10-10T13:32:02.541Z","comments":true,"path":"2022/10/05/page-3/","link":"","permalink":"http://example.com/2022/10/05/page-3/","excerpt":"","text":"由于C/C++语言本身没有数组越界检查机制，当向缓冲区里写入的数据超过了为其分配的大小时，就会发生缓冲区溢出。 Text段主要包含程序代码（一系列可执行的指令），另外还有一些只读的数据。通常操作系统标记该段为只读段， 如果有进程试图修改该段，会引发段错误。 Data段包括已初始化和未初始化的全局变量，静态变量也放于此处。该段的大小是在编译时期计算的。 紧接着Data段的一块内存是由堆和栈共享的区域。堆向下（高地址）增长，栈向上（低地址）增长。 堆中保存动态分配的数据，调用malloc函数或者calloc函数或者使用new操作符会在堆上分配内存。 栈中保存的是函数调用时传递的参数，局部变量的值和一些记录进程运行状态的寄存器的值。 堆和栈所占内存都是在运行期间分配的。如果进程的堆或栈的增长超出了为进程分配的内存大小， 那么该进程会被阻塞，操作系统重新为其分派一块更大的内存。 栈的作用 栈这种数据结构，我们再熟悉不过。它的特点是后进先出（LIFO），在它之上有两个著名的函数，push和pop。 函数是结构化程序设计最重要的技术。程序的执行过程可以看作是连续的函数调用。当一个函数执行完毕时，程序要回到调用 指令的下一条指令（紧接call指令）处继续执行，而栈的特点刚好适合这个条件。 在介绍函数调用的细节之前，我们先来看一下栈帧的概念。 栈帧是栈中的逻辑片段。每个函数调用时，都会push一个栈帧，当函数返回时，pop。 栈帧里面存放着函数的参数，函数局部变量以及为了恢复前一栈帧所需要的数据。 我们知道，栈是实现相关的，不同架构的计算机，栈的增长方向和栈顶指针（ESP）的指向是不一样的。这篇文章里所讲的栈， 都是向低地址增长，栈顶指针是指向栈顶的。 由于ESP的值在程序执行过程中会频繁的改变，用到它的偏移量来定位变量会 很麻烦。因此，编译器使用另外一个寄存器EBP来记录执行时，首先把旧的EBP值压栈，然后把当前ESP值作为新的EBP值，接着 改变ESP值来为函数局部变量预留出空间。 转载：缓冲区溢出攻击原理、方法及防范（一） -shilcare - 博客园 (cnblogs.com)","categories":[],"tags":[]},{"title":"浅谈内存","slug":"page-2","date":"2022-10-01T13:13:46.000Z","updated":"2022-10-10T13:31:46.661Z","comments":true,"path":"2022/10/01/page-2/","link":"","permalink":"http://example.com/2022/10/01/page-2/","excerpt":"","text":"1.内存(Memory)是计算机的重要部件，也称内存储器和主存储器，它用于暂时存放CPU中的运算数据，以及与硬盘等外部存储器交换的数据。它是外存与CPU进行沟通的桥梁，计算机中所有程序的运行都在内存中进行，内存性能的强弱影响计算机整体发挥的水平。只要计算机开始运行，操作系统就会把需要运算的数据从内存调到CPU中进行运算，当运算完成，CPU将结果传送出来。 2.为了有效的使用内存，把内存划分成一个个小的内存单元，每个内存单元的大小是1个字节。 3.为了能够有效的访问即快速找到内存的每个单元，就给内存单元进行了编号，这些编号被称为该内存单元的地址。 4.内存分配：在C/C++中内存分为5个区，分别为栈区、堆区、全局/静态存储区、常量存储区、代码区。 静态内存分配:编译时分配。包括:全局、静态全局、静态局部三种变量。 动态内存分配:运行时分配。包括:栈(stack): 局部变量。堆(heap):c语言中用到的变量被动态的分配在内存中。(malloc或calloc、realloc、free函数) 栈区（stack）：指那些由编译器在需要的时候分配，不需要时自动清除的变量所在的储存区，如函数执行时，函数的形参以及函数内的局部变量分配在栈区，函数运行结束后，形参和局部变量去栈（自动释放）。栈内存分配运算内置与处理器的指令集中，效率高但是分配的内存空间有限。 堆区（heap）：指哪些由程序员手动分配释放的储存区，如果程序员不释放这块内存，内存将一直被占用，直到程序运行结束由系统自动收回，c语言中使用malloc，free申请和释放空间。 静态储存区（static）：全局变量和静态变量的储存是放在一块的，其中初始化的全局变量和静态变量在一个区域，这块空间当程序运行结束后由系统释放。 常量储存区（const）：常量字符串就是储存在这里的，如“ABC”字符串就储存在常量区，储存在常量区的只读不可写。const修饰的全局变量也储存在常量区，const修饰的局部变量依然在栈上。 程序代码区：存放源程序的二进制代码。 ———————————————— 版权声明：本文为CSDN博主「wy无语」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。 原文链接：https://blog.csdn.net/wy749929317/article/details/123729606 ———————————————— 版权声明：本文为CSDN博主「wy无语」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。 原文链接：C语言内存分配_wy无语的博客-CSDN博客_c语言内存分配 1取自百度百科 2，3取自博客园 其余取自csdn博主","categories":[],"tags":[]},{"title":"博客的搭建","slug":"page","date":"2022-09-26T15:20:12.000Z","updated":"2022-09-26T15:29:21.185Z","comments":true,"path":"2022/09/26/page/","link":"","permalink":"http://example.com/2022/09/26/page/","excerpt":"","text":"今日整理下博客的搭建。 关于博客的搭建共耗时5个小时，当时懵懂的我看着一堆的fault人都傻了，不过万幸的是最后还是搭建好了 我第一步先去github官网注册了自己的账号，然后成功创建了我的博客的域名， 而后遵循网络的指导先后安装了git，node.js，hexo 此时我发现还得去GitHub上生成ssh密钥，待密钥安装好后我便检查了hexo，git等的安装 然后去修改了下_config.yml文件 最后在hexo clean，hexo g ，hexo d 后成功生成了属于我的blog","categories":[],"tags":[]},{"title":"整型溢出（1）","slug":"page-1","date":"2022-09-25T15:06:52.000Z","updated":"2022-09-26T15:19:29.265Z","comments":true,"path":"2022/09/25/page-1/","link":"","permalink":"http://example.com/2022/09/25/page-1/","excerpt":"","text":"今天由于某些原因简单了解下整型溢出，在此简单整理下： 通常来说，整数溢出指的是整数达到其字节大小极限时的一种情况。 原理： 计算机中整数变量有上下界，如果在算术运算中出现越界，就会出现两类整数溢出。超出整数类型的最大表示范围，数字便会由一个极大值变为一个极小值或直接归零，这叫“上溢”； 超出整数类型的最小表示范围的话，数字便会由一个极小值或者零变成一个极大值，这叫做“下溢”。 而其后果轻则导致运算结果出错，重则导致内存被覆盖、缓冲区溢出、被黑客攻击、系统崩溃。 （以上内容均取自网络） 此处仅为简单介绍概念，以后若有机会再深入研究","categories":[],"tags":[]}],"categories":[],"tags":[]}